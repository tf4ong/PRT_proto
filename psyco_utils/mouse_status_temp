import pandas as pd 
import tqdm
import os
from datetime import datetime,timedelta
import numpy as np
import math
from psyco_utils.track_utils import *
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import itertools


def status_update(tag,track_ids,tracked_tags,nmice):
    '''
    monitors if the mice is in the cage
    '''
    if tag in tracked_tags:
        return 1
    if len(track_ids) ==nmice:
        return 1
    else:
        return 0

def interaction_correcter(tags,iou_dic,nmice):
    '''
    gets the specific mouse the tagged mouse is interacting with
    '''
    template=['UK' for count in range(nmice-1)]
    if template not in iou_dic.values():
        return iou_dic
    else:
       checker={sid:sids for sid,sids in iou_dic.items()}
       keys=list(checker.keys())
       if checker[keys[0]]==[keys[1]]:
           dic_return={sid:[] for sid in tags}
           for tag in tags:
               dic_return[tag]=[ta for ta in tags if ta != tag]
           return dic_return
       else:
           return iou_dic
       
        
       
for tag in self.tags:
    mice_list=[ta for ta in self.tags if ta!=tag]
    mice_list.append('UK')
    data=[]
    for ta in mice_list:
        values= np.array([1 if ta in i else 0 for i in self.df_final[str(tag)].values])
        data.append(values)
    list_nmice={}
    for i in range(len(data)):
        exec(f'n_{str(i)}_mouse=[]')
        exec(f'list_nmice[i]=n_{str(i)}_mouse')
    for i in sum(data):
        for z in list_nmice.keys():
            if z != i:
                list_nmice[z].append(0)
            else:
                list_nmice[z].append(1)
    v2check=list_nmice[0]
    for i in list_nmice.keys():
       list_nmice[i]=(np.asarray(list_nmice[i][:-1])*np.asarray(self.df_final['Duration'].values[1:])).tolist()
       list_nmice[i]=np.insert(list_nmice[i],len(list_nmice[i]),np.nan)
    mice_list=[str(i) for i in mice_list]
    data=[value[:-1]*self.df_final['Duration'].values[1:] for value in data]
    data=[np.insert(value,len(value),np.nan) for value in data ]
    mice_list.append('Time')
    data.append(self.df_final['Time'].to_list())
    dic={mice_list[i]:data[i] for i in range(len(mice_list))}
    dic.update(list_nmice)
    df=pd.DataFrame.from_dict(dic)
    df[str(tag)+'ocorner_dur']=self.df_final[str(tag)+'ocorner_dur'].to_list()
    df[str(tag)+'corner_dur']=self.df_final[str(tag)+'corner_dur'].to_list()
    df[str(tag)+'in_cage_dur']=self.df_final[str(tag)+'in_cage_dur'].to_list()
    df=df.drop(columns=[0])
    alone_marker=[]
    track2check=self.df_final['Tracked'].values
    for i in range(len(v2check)):
        if v2check[i] ==0:
            alone_marker.append(0)
        else:
            if tag in track2check[i]:
                alone_marker.append(1)
            else:
                alone_marker.append(0)
    alone_marker=(np.asarray(alone_marker[:-1])*np.asarray(self.df_final['Duration'].values[1:])).tolist()
    alone_marker=np.insert(alone_marker,len(alone_marker),np.nan)
    df[0]=alone_marker
    df.to_csv(f'{self.path}{tag}_interactions.csv')
    self.mouse_interactions[tag]=df